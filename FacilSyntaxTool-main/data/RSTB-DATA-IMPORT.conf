MAGIC: RSTB.DATA.TOOL.V01

# ==================================================================
# Initial Database Import Schema
# ==================================================================
DB.IMPORT.CONFIG: DEFAULT BEGIN

  # Default output
  OUTPUT:    IMPORT.RSTB.PROJECTS
  RESPONSE:  ERROR

  # Database connection
  # Tag      Configuration file               Configuration name
  DB.CONFIG: ${/DOCUMENT.PATH}/database.conf  DB.EXAMPLE.V1

  # Access by system user table
  RSTB.USER:      **USER**
  RSTB.PASSWORD:  **PASSWORD**
  RSTB.PRIVILEGE: 'PROCESS'

  # Alias for then no data sets
  NULL.ALIAS: BEGIN
     'N/A' '*NULL*' '*NONE*'
  END.NULL.ALIAS

  # Table data
  ALIASES: BEGIN
    ALIAS: PROJECT.DATA.FILE  '${/DOCUMENT.PATH}/../import/project-table-v2.tsv'
    ALIAS: METHODS.DATA.FILE  '${/DOCUMENT.PATH}/../import/method-table.csv'
    ALIAS: TAXA.DATA.FILE     '${/DOCUMENT.PATH}/../import/taxa-table-v2.tsv'
    ALIAS: CAMERAS.DATA.FILE  '${/DOCUMENT.PATH}/../import/cameras.csv'
    ALIAS: PLANES.DATA.FILE   '${/DOCUMENT.PATH}/../import/planes.csv'
    ALIAS: TLIST.DATA.FILE    '${/DOCUMENT.PATH}/../import/tec-list.csv'
    ALIAS: TGROUP.DATA.FILE   '${/DOCUMENT.PATH}/../import/tec-group.csv'
    ALIAS: PROJECT.REF 1
  END.ALIASES

  # Table row TSV.PLAIN|RSTB.ROWS|RSTB.TAGGED
  # Only relevant for text based import
  TEXT.READER: PLAIN
  SQL.WRITER:  PLAIN

  # Set the importing USER ID and store it in the dictionary
  DB.QUERY: USER BEGIN
     SELECT SYSTEM.UID('${//RSTB.USER}') AS REF;
  END.USER

  # Set the standard method
  DB.QUERY: METHOD BEGIN
    SELECT MTH_IDENT as REF
    FROM   BASE.METHODS
    WHERE  MTH_NAME = ':{METHOD}';
  END.METHOD

  # Date conversation start
  DB.QUERY: CVX.START BEGIN
     SELECT TO_DATE(':{RUNTIME_BEGIN}', 'MM/DD/YYYY')::DATE AS DT;
  END.CVX.START

  # Date conversation end date
  DB.QUERY: CVX.END BEGIN
     SELECT TO_DATE(':{RUNTIME_END}', 'MM/DD/YYYY') AS DT;
  END.CVX.END

  # Uniqe checks and references
  DB.QUERY: CLIENT BEGIN
     SELECT CT_IDENT AS REF
     FROM  BASE.CLIENTS
     WHERE CT_NAME = ':{CLIENT_NAME}';
  END.CLIENT

  # Resolve the project reference
  DB.QUERY: PROJECT BEGIN
     SELECT PRJ_IDENT AS REF
     FROM  BASE.PROJECTS
     WHERE PRJ_NAME = ':{PROJECT_NAME}';
  END.PROJECT

  # Date Conversation Start
  DB.QUERY: MAKE.PHASE BEGIN
     SELECT ':{PROJECT_NAME}'||'-'||COALESCE(':{PROJECT_PHASE}','**NONE**') AS NAME;
  END.MAKE.PHASE

  # Date conversation start
  DB.QUERY: MAKE.CAM BEGIN
     SELECT ':{CM_SERNO}'||':'||COALESCE(':{LN_SERNO}','**NONE**') AS NAME;
  END.MAKE.CAM

  # EPSG: XXXX to Integer
  DB.QUERY: EXTRACT.EPSG BEGIN
     SELECT REPLACE(':{COORDINATE_SYSTEM}', 'EPSG: ','')::INT as CRS
  END.EXTRACT.EPSG

  # Get Technical Group Part Ident
  DB.QUERY: TGROUP.CONFIG BEGIN
    SELECT TCF_IDENT AS REF
    FROM BASE.TEC_CONFIGS
    WHERE TCF_NAME=':{GROUP}';
  END.TGROUP.CONFIG

  # Get Technical Group Part Ident
  DB.QUERY: TGROUP.PART BEGIN
    SELECT BASE.TEC_FIND_PART_ID(':{NAME}', ':{CYCLE}'::DATE, ':{TYPE}') AS IDENT
  END.TGROUP.PART

  # Get Current Camera
  DB.QUERY: CURRENT.CAMERA BEGIN
    SELECT cam_ident, cam_name, cam_serno, cam_cycle
    FROM   base.cameras
    WHERE  cam_serno = ':{CAMERA_SERIAL}' AND cam_active
    ORDER  BY cam_cycle DESC ;
  END.CURRENT.CAMERA

  DB.QUERY: DB.QUERY BEGIN
    SELECT cam_ident, cam_name, cam_serno, cam_cycle
    FROM   base.cameras
    WHERE  cam_serno = ':{CAMERA_SERIAL}' AND cam_active
    ORDER  BY cam_cycle DESC ;
  END.DB.QUERY

  # End of row tag
  # END.ROW: *NONE*

  # Check sums Types *NONE*|MD5|SHA1|SHA128|SHA256
  # TAG:          TYPE   FIELD
  # USE.CHECK.SUMS: *NONE* *NONE*

  # ----------------------------------------------------------------
  # Import table projects description
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.CLIENTS BEGIN

     # Database Table
     DB.TABLE: BASE.CLIENTS

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: CT_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        CT_NAME
     END.DB.UNIQUE

     IMPORT.FILE: ${//PROJECT.DATA.FILE}

     HEADER: ON

     # Separator
     SEPARATOR: '\t'

     TRANSLATE: BEGIN
        # Tag   Value/ Column   Type   Default SQL-Task Field       Type
        # CONST:  0               INT    *NONE*  DB.QUERY: CT_USR_REF :{/DB.QUERY/USER/REF}
        COL:    CLIENT_NAME     STR    *NONE*  SQL.SET:  CT_NAME    STR:64

        # Imported via
        COL: CONTACT_PERSON     STR   *NONE*   SQL.SET: CT_PERSON  STR:64
        COL: CLIENT_ADDRESS     STR   *NONE*   SQL.SET: CT_ADDR    TEXT
        COL: CLIENT_DESCRIPTION STR   *NONE*   SQL.SET: CT_DESC    TEXT
        COL: CLIENT_MAIL        STR   *NONE*   SQL.SET: CT_MAIL    STR:64
        COL: CLIENT_MOBILE      STR   *NONE*   SQL.SET: CT_MOBILE  STR:64
        COL: CLIENT_PHONE       STR   *NONE*   SQL.SET: CT_PHONE   STR:64
     END.TRANSLATE

  END.IMPORT.CLIENTS

  # ----------------------------------------------------------------
  # Import Table Projects
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.PROJECTS BEGIN

     # Database Table
     DB.TABLE: BASE.PROJECTS

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: PRJ_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        PRJ_NAME
     END.DB.UNIQUE

     IMPORT.FILE: ${//PROJECT.DATA.FILE}

     # Separator
     SEPARATOR: '\t'

     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field       Type
        CONST: 0                INT    *NONE*  DB.QUERY: PRJ_USR_REF :{/DB.QUERY/USER/REF}
        COL:   CLIENT_NAME      STR    *NONE*  DB.QUERY: CT_REF      :{/DB.QUERY/CLIENT/REF}
        COL:   PROJECT_NAME     STR    *NONE*  SQL.SET:  PRJ_NAME    STR:64

        # Project description
        COL: PROJECT_DESCRIPTION STR *NONE* SQL.SET:  PRJ_DESC  TEXT
        COL: RUNTIME_BEGIN       DT  *NONE* DB.QUERY: PRJ_BEGIN :{/DB.QUERY/CVX.START/DT}
        COL: RUNTIME_END         DT  *NONE* DB.QUERY: PRJ_END   :{/DB.QUERY/CVX.END/DT}

     END.TRANSLATE

  END.IMPORT.PROJECTS

  # ----------------------------------------------------------------
  # Import Table Project Phases
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.PHASES BEGIN

     # Database Table
     DB.TABLE: BASE.PHASES

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: PJP_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        PJP_NAME
     END.DB.UNIQUE

     IMPORT.FILE: ${//PROJECT.DATA.FILE}

     # Separator
     SEPARATOR: '\t'

     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column      Type  Default SQL-Task  Field          Type
        CONST:  :{/RSTB.USER}     INT   *NONE*  DB.QUERY:  PJP_USR_REF   :{/DB.QUERY/USER/REF}
        COL:   METHOD             STR   *NONE*  DB.QUERY:  MTH_REF       :{/DB.QUERY/METHOD/REF}
        COL:   PROJECT_NAME       STR   *NONE*  DB.QUERY:  PRJ_REF       :{/DB.QUERY/PROJECT/REF}
        COL:   PROJECT_PHASE      STR   *NONE*  DB.QUERY:  PJP_NAME      :{/DB.QUERY/MAKE.PHASE/NAME}
        COL:   PHASE_DESCRIPTION  STR   *NONE*  SQL.SET:   PJP_DESC      TEXT
        COL:   RUNTIME_BEGIN      DT    *NONE*  DB.QUERY:  PJP_BEGIN     :{/DB.QUERY/CVX.START/DT}
        COL:   RUNTIME_END        DT    *NONE*  DB.QUERY:  PJP_END       :{/DB.QUERY/CVX.END/DT}
        COL:   COORDINATE_SYSTEM  STR   *NONE*  DB.QUERY:  PJP_EPSG      :{/DB.QUERY/EXTRACT.EPSG/CRS}
        COL:   SURVEY_AREA        REAL  *NONE*  SQL.SET:   PJP_AREA      REAL
        CONST: 75                 REAL  *NONE*  SQL.SET:   PJP_FWD_OVER  REAL
        CONST:  0                 REAL  *NONE*  SQL.SET:   PJP_SIDE_OVER REAL
        CONST:  0.018             REAL  *NONE*  SQL.SET:   PJP_SMP_GSD   REAL
        CONST:  1700              REAL  *NONE*  SQL.SET:   PJP_SMP_ALT   REAL
        COL:    SURVEYING         BOOL  FALSE   SQL.SET:   PJP_SURVEY    BOOL
        COL:    GEOREFERENCING    BOOL  FALSE   SQL.SET:   PJP_GEOREF    BOOL
        COL:    SCREENING         BOOL  FALSE   SQL.SET:   PJP_SCREEN    BOOL
        COL:    SPECIES_ID        BOOL  FALSE   SQL.SET:   PJP_SP_IDENT  BOOL
        COL:    FINAL_REPORT      BOOL  FALSE   SQL.SET:   PJP_REPORT    BOOL
    END.TRANSLATE

  END.IMPORT.PHASES

  # ----------------------------------------------------------------
  # Import Table Default
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.METHODS BEGIN

     # Database Table
     DB.TABLE: BASE.METHODS

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: MTH_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        MTH_NAME
     END.DB.UNIQUE

     IMPORT.FILE: ${//METHODS.DATA.FILE}

     # Separator
     SEPARATOR: '\s+'

     # Header is ON/OFF
     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field       Type
        CONST: 0           INT    *NONE*  DB.QUERY: MTH_USR_REF :{/DB.QUERY/USER/REF}
        COL:   NAME        STR    *NONE*  SQL.SET:  MTH_NAME  STR:64
        COL:   DESCRIPTION STR    *NONE*  SQL.SET:  MTH_DESC  TEXT

     END.TRANSLATE
  END.IMPORT.METHODS

  # ----------------------------------------------------------------
  # Import Table Default
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.PLANES BEGIN

     # Database Table
     DB.TABLE: BASE.PLATFORM

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: PFM_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        PFM_NAME
     END.DB.UNIQUE

     IMPORT.FILE: ${//PLANES.DATA.FILE}

     # Separator
     SEPARATOR: '\s+'

     # Header is ON/OFF
     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field       Type
        CONST: 0           INT    *NONE*  DB.QUERY: PFM_USR_REF :{/DB.QUERY/USER/REF}
        COL:   PLATFORM    STR    *NONE*  SQL.SET:  PFT_TYPE    STR:64
        COL:   NAME        STR    *NONE*  SQL.SET:  PFM_NAME    STR:64
        COL:   TYPE        STR    *NONE*  SQL.SET:  PFM_TYPE    STR:64
        COL:   CYCLE       STR    *NONE*  SQL.SET:  PFM_CYCLE   DATE
        COL:   DESC        STR    *NONE*  SQL.SET:  PFM_DESC    TEXT
     END.TRANSLATE
  END.IMPORT.PLANES


  # ----------------------------------------------------------------
  # Import Camera Data
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.CAMERAS BEGIN

     # Database Table
     DB.TABLE: BASE.CAMERAS

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: CAM_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        CAM_NAME CAM_CYCLE
     END.DB.UNIQUE

     IMPORT.FILE: ${//CAMERAS.DATA.FILE}

     # Separator
     SEPARATOR: '\s+'

     # Header is ON/OFF
     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field       Type
        CONST: 0                INT    *NONE*  DB.QUERY:  CAM_USR_REF :{/DB.QUERY/USER/REF}
        COL:   CM_SERNO         STR    *NONE*  DB.QUERY:  CAM_NAME    :{/DB.QUERY/MAKE.CAM/NAME}
        COL:   CM_TYPE          STR    *NONE*  SQL.SET:   CAM_TYPE    STR:64
        COL:   CM_SERNO         STR    *NONE*  SQL.SET:   CAM_SERNO   STR:64
        COL:   CM_FWR           STR    *NONE*  SQL.SET:   CAM_FWR     STR:64
        COL:   CM_COUNT         INT    0       SQL.SET:   CAM_COUNT   INT
        COL:   CM_POS           STR    *NONE*  SQL.SET:   CAM_POS     STR:32
        COL:   CM_COR           STR    *NONE*  SQL.SET:   CAM_COR     STR:32
        COL:   CM_CYC           INT    0       SQL.SET:   CAM_CYCLE   DATE
        COL:   LN_TYPE          STR    *NONE*  SQL.SET:   LNS_TYPE    STR:64
        COL:   LN_SERNO         STR    *NONE*  SQL.SET:   LNS_SERNO   STR:64
        COL:   LN_FWR           STR    *NONE*  SQL.SET:   LNS_FWR     STR:64
        COL:   LN_COUNT         INT    0       SQL.SET:   LNS_COUNT   INT
        COL:   LN_FLEN          REAL   1       SQL.SET:   LNS_FLEN    NUM:8:4
        COL:   LN_FOVL          REAL   1       SQL.SET:   LNS_FVL     NUM:9:3
        COL:   LN_FOVS          REAL   1       SQL.SET:   LNS_FVS     NUM:9:3
        COL:   SN_SZL           REAL   1       SQL.SET:   SNS_CSL     NUM:6:4
        COL:   SN_SZS           REAL   1       SQL.SET:   SNS_CSS     NUM:6:4
        COL:   SN_ROWS          INT    0       SQL.SET:   SNS_ROWS    INT
        COL:   SN_COLS          INT    0       SQL.SET:   SNS_COLS    INT
        COL:   LV_OX            REAL   0       SQL.SET:   LVR_OX      NUM:10:4
        COL:   LV_OY            REAL   0       SQL.SET:   LVR_OY      NUM:10:4
        COL:   LV_OZ            REAL   0       SQL.SET:   LVR_OZ      NUM:10:4
        COL:   MT_ROLL          REAL   0       SQL.SET:   MNT_ROLL    NUM:8:4
        COL:   MT_PITCH         REAL   0       SQL.SET:   MNT_PITCH   NUM:8:4
        COL:   MT_HEAD          REAL   0       SQL.SET:   MNT_HEAD    NUM:8:4
        COL:   BS_ROLL          REAL   0       SQL.SET:   BS_ROLL     NUM:8:4
        COL:   BS_PITCH         REAL   0       SQL.SET:   BS_PITCH    NUM:8:4
        COL:   BS_HEAD          REAL   0       SQL.SET:   BS_HEAD     NUM:8:4
        COL:   AJ_ROLL          REAL   0       SQL.SET:   ADJ_ROLL    NUM:8:4
        COL:   AJ_PITCH         REAL   0       SQL.SET:   ADJ_PITCH   NUM:8:4
        COL:   AJ_HEAD          REAL   0       SQL.SET:   ADJ_HEAD    NUM:8:4
        COL:   ACTIVE           BOOL   FALSE   SQL.SET:   CAM_ACTIVE  BOOL
     END.TRANSLATE
  END.IMPORT.CAMERAS


  # ----------------------------------------------------------------
  # Import Table Default
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.TEC.CONFIGS BEGIN

     # Database Table
     DB.TABLE: BASE.TEC_CONFIGS

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: TCF_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        TCF_NAME TCF_CYCLE
     END.DB.UNIQUE

     IMPORT.FILE: ${//TLIST.DATA.FILE}

     # Separator
     SEPARATOR: '\s+'

     # Header is ON/OFF
     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field       Type
        CONST: 0           INT    *NONE*  DB.QUERY: TCF_USR_REF :{/DB.QUERY/USER/REF}
        COL:   START       STR    *NONE*  SQL.SET:  TCF_CYCLE   DATE
        COL:   NAME        STR    *NONE*  SQL.SET:  TCF_NAME    STR:64
        COL:   DESC        STR    *NONE*  SQL.SET:  TCF_DESC    TEXT
        COL:   ACTIVE      BOOL   *NONE*  SQL.SET:  TCF_ACTIVE  BOOL
     END.TRANSLATE

  END.IMPORT.TEC.CONFIGS

  # ----------------------------------------------------------------
  # Import Table Default
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.TEC.GROUPS BEGIN

     # Database Table
     DB.TABLE: BASE.TEC_GROUPS

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: TGP_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        TCF_REF TGP_PART_IDENT TGP_PART_TYPE
     END.DB.UNIQUE

     IMPORT.FILE: ${//TGROUP.DATA.FILE}

     # Separator
     SEPARATOR: '\s+'

     # Header is ON/OFF
     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field    Type
        CONST: 0           INT    *NONE*  DB.QUERY: TGP_USR_REF    :{/DB.QUERY/USER/REF}
        COL:   GROUP       STR    *NONE*  DB.QUERY: TCF_REF        :{/DB.QUERY/TGROUP.CONFIG/REF}
        COL:   NAME        STR    *NONE*  DB.QUERY: TGP_PART_IDENT :{/DB.QUERY/TGROUP.PART/IDENT}
        COL:   TYPE        STR    *NONE*  SQL.SET:  TGP_PART_TYPE  STR:16
        COL:   ACTIVE      BOOL   *NONE*  SQL.SET:  TGP_ACTIVE     BOOL

     END.TRANSLATE

  END.IMPORT.TEC.GROUPS

# ----------------------------------------------------------------
  # Import Table Taxa
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.TAXA BEGIN

     # Database Table
     DB.TABLE: BASE.TAXA

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: TX_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        TX_SCI_NAME
     END.DB.UNIQUE

     IMPORT.FILE: ${//TAXA.DATA.FILE}

     # Separator
     SEPARATOR: '\t'

     # Header is ON/OFF
     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field       Type
        CONST: 0                INT    *NONE*  DB.QUERY: TX_USR_REF   :{/DB.QUERY/USER/REF}
        COL:   EURING           INT    *NONE*  SQL.SET:  TX_EURING    INT
        COL:   KEY              STR    *NONE*  SQL.SET:  TX_KEY       STR:64
        COL:   KEY_ALT          STR    *NONE*  SQL.SET:  TX_KEY_ALT   STR:64
        COL:   GBIF             STR    ''      SQL.SET:  TX_GBIF      STR:64
        COL:   SRANK            STR    ''      SQL.SET:  TX_RNK_KEY   STR:12
        COL:   RANK             STR    ''      SQL.SET:  TX_RNK_GBIF  STR:12
        COL:   SCI_NAME         STR    *NONE*  SQL.SET:  TX_SCI_NAME  STR:64
        COL:   ACC_NAME         STR    ''      SQL.SET:  TX_ACC_NAME  STR:64
        COL:   OEN_NAME         STR    ''      SQL.SET:  TX_AEN_NAME  STR:64
        COL:   HEN_NAME         STR    ''      SQL.SET:  TX_CEN_NAME  STR:64
        COL:   AUTHOR           STR    ''      SQL.SET:  TX_AUTHOR    STR:64
        COL:   CLASS            STR    ''      SQL.SET:  TX_CLASS     STR:64
        COL:   MARINE           BOOL   FALSE   SQL.SET:  TX_MARINE    BOOL
        COL:   TERRESTIC        BOOL   FALSE   SQL.SET:  TX_TERRA     BOOL
        COL:   FRESHWATER       BOOL   FALSE   SQL.SET:  TX_WATER     BOOL
        COL:   PROGRAM          STR    ''      SQL.SET:  TX_PRG_KEY   STR:32
        COL:   GROUP            STR    ''      SQL.SET:  TX_GRP_KEY   STR:32
        COL:   ARTIFCIAL        BOOL   FALSE   SQL.SET:  TX_ART_KEY   STR:32
        COL:   STATUS           STR    ''      SQL.SET:  TX_GSTATUS   STR:128
        COL:   BDY_LEN          STR    ''      SQL.SET:  TX_DSC_LEN   STR:64
        COL:   BDY_SPAN         STR    ''      SQL.SET:  TX_DSC_SPAN  STR:64
        COL:   LNK_GBIF         STR    ''      SQL.SET:  TX_GBIF_LINK STR:1024
        COL:   LNK_IUCN         STR    ''      SQL.SET:  TX_IUCN_LINK STR:1024
        COL:   LNK_ITIS         STR    ''      SQL.SET:  TX_ITIS_LINK STR:1024
        COL:   LNK_WIKI         STR    ''      SQL.SET:  TX_WIKI_LINK STR:1024
        COL:   LNK_WORMS        STR    ''      SQL.SET:  TX_WORMS_LINK STR:1024
     END.TRANSLATE

  END.IMPORT.TAXA

  # ----------------------------------------------------------------
  # Import Table Default Import Block
  # ----------------------------------------------------------------
  IMPORT.TRANSFORMER: IMPORT.DEFAULT BEGIN

     # Database Table
     DB.TABLE: _TABLE.NAME_

     # Overwrite modus
     DB.WRITE: BEGIN
        UPDATE INSERT
     END.DB.WRITE

     # PRIMARY KEY
     DB.PKEY: TAB_IDENT

     # At this level the DS table has to be unique
     DB.UNIQUE: BEGIN
        _UNIQUE.NAME_
     END.DB.UNIQUE

     IMPORT.FILE: ${/DOCUMENT.FILE}

     # Separator
     SEPARATOR: '\t'

     # Header is ON/OFF
     HEADER: ON

     TRANSLATE: BEGIN
        # Project name and client reference
        # Tag  Value/ Column    TabType Default SQL-Task  Field       Type
        CONST: 0                INT    *NONE*  DB.QUERY: _USR_REF :{/DB.QUERY/USER/REF}
        COL:   NAME             STR    *NONE*  SQL.SET:  _NAME    STR:64

     END.TRANSLATE

  END.IMPORT.DEFAULT

# =======================================================
END.DEFAULT
# =======================================================
