MAGIC: RSTB.DATA.TOOL.V01 BEGIN

# ==================================================================
# Initial Database Import Schema
# (c) 2022-01-12 Alexander Weidauer
# All Rights Reserved
# ==================================================================
#@ MAGIC:   FILE.DESCRIPTOR.V01 BEGIN
#@ MODE:    ORG
#@ PURPOSE: Main configuration for the rstb-data-tool
#@ AUTHOR:  Alexander Weidauer
#@ DATE:    2022-05-13
#@ DESCRIPTION: BEGIN
#@
#@ * Introduction
#@
#@   The configuration file feeds the program setup of the
#@   ~rstb-data-tool~. One internal link points to a second
#@   important link to describe the setup for the database
#@   database connection which is called ~database.conf.
#@
#@   The configuration contains several tags and blocks
#@   which are common in the ~rstb-toolkit~ universe.
#@
#@ * Common
#@
#@   1. The the setup is written in plain text.
#@   2. The code supports comments defined by an leading
#@      hash tag.
#@   3. Comment lines defined by ~#@~ carrying a subsequent
#@      metadata information.
#@   5. Tag/ Block keywords are at the begin of an line and
#@      starting with a name and a colon ~NAME:~
#@   6. The the setup block oriented using full qualified
#@      ~BEGIN~ and ~END~ statements.
#@
#@       # --- NAMED.BLOCK ---
#@      BLOCK: NAME BEGIN
#@      ...
#@      END.NAME
#@
#@      # --- ANONYMOUS BLOCK ---
#@      DESC: BEGIN
#@      ...
#@      END.DESC
#@
#@   6. You can use predfined constants in the context
#@      to shorten the length of the file.
#@
#@   7. Constant acces is path oriented. To learn more, please
#@      refer the Perl package Data::DPath at CPAN.
#@
#@   8. Predefined variables/constant are coded by the ~${VARNAME}~
#@      annotation.
#@
#@   9. Runtime variables feed by the program are coded by
#@      ~:{VARNAME}
#@
#@  10. String data are enclosed in single quotes
#@
#@  11. Numeric data are coded as in common languages.
#@
#@  12. Valid boolean tokens are: TRUE and FALSE | ON and OFF | 0 and 1.
#@
#@ * Configuration tags
#@
#@   The ~rstb-data-tool~ is related to the package ~Geo::RSTB::DataTK~.
#@   The most parts of the functionality are managed there. The
#@   configuration file syntax is also defined in this packages.
#@   The following blocks and tag are used:
#@
#@ ** File and Main Block
#@
#@  The file consists of an magic container registration
#@
#@  MAGIC: RSTB.DATA.TOOL.V01
#@
#@  and the a sequence of several main blocks:
#@
#@  RSTB.DATA.TOOL.CONFIG: BLOCK1 BEGIN
#@  ...
#@  BLOCK1
#@  etc.
#@
#@  ** Tags of the Main Block
#@
#@  Tags and blocks of main the are (alphabetical order):
#@
#@  ALIASES :: Aliases, to define constants and shorten the
#@  configuration code.
#@
#@  DB.CONFIG :: A mandatory file-block-link to the database
#@               connection setup.
#@
#@  DB.QUERIES :: Bunch of predefined queries for the application
#@                written as named blocks
#@
#@  IMPORT.TRANSFORMER :: An optional block to import text files
#@                        into the database, only needed for
#@                        the initial database setup.
#@
#@  NULL.ALIAS :: An mandatory list of tokens defining a NA value.
#@                The code is necessary due to the several NA
#@                descriptors occurring in different languages.
#@
#@  OUTPUT :: IPC output name of the application action.
#@
#@  RESPONSE :: IPC Response type if the application fails/succeeds.
#@              Supported tags are FATAL|ERROR|WARNING|INFO|OK
#@
#@  RSTB.USER :: User name used during the tool operation.
#@
#@  RSTB.PRIVILEGE :: One of the privileges needed for the operation.
#@     Supported tags are:
#@     ADMIN  :: Common administration tasks
#@     BACKUP :: Common Backup tasks
#@     COPY   :: Common copy tasks -> discuss delegate to PROCESS
#@     CHANGE.OWNER :: Change record ownership -> delegate to PROCESS
#@     CHANGE.GROUP :: Change record group -> delegate to PROCESS
#@     FLIGHT.PLAN :: Managing flight plans
#@     IMAGE.QA :: Handle image QA
#@     MOUNT.DU :: Mount an handle disk units  -> delegate to PROCESS/ ADMIN
#@     MOUNT.XD :: Maintain disk units  -> delegate to PROCESS/ ADMIN
#@     PROCESS  :: Common device and data management tasks
#@     PROJECT  :: Create and maintain projects.
#@     REPORT   :: Query data to  create reports
#@     SCREENING :: Access to screen data.
#@     SPECIES.ID :: Access to identify animals.
#@     SPECIES.QA :: Access to maintain the species base data.
#@
#@  SQL.WRITER :: Tag how to, how to write database data.
#@                The tags are used PLAIN and DEFAULT (reserved).
#@
#@  TEXT.READER :: Tag how to read an text file
#@                 The tags are used PLAIN and DEFAULT (reserved).
#@
#@  ** Block ALIASES
#@
#@  The aliases are an anonymous block used to define scalar variables 
#@  of an configuration in one single place. The definition is:
#@
#@     ALIASES: BEGIN
#@       ALIAS: NAME1 VALUE
#@       ALIAS: NAME2 VALUE
#@       ...
#@     END.ALIASES
#@
#@  Aliases can be coded and will be resolved by 'path annotations'.
#@
#@   Examples: 
#@      ${/CONFIG.NAME/ALIASES/NAME1} -- Explicit descriptor
#@      ${//ALIASES/NAME1} -- Semi-implicit descriptor screening
#@                            the alias block
#@      ${//NAME1} -- Search descriptor
#@
#@  ** Block DB.QUERY
#@
#@  ** Block IMPORT.TRANSFORMER
#@
#@  *** Block TRANSLATE
#@
#@  *** Record CONST
#@
#@  *** Record COL
#@
#@ END.DESCRIPTION
#@ END.FILE.DESCRIPTOR.V01
# ==================================================================

RSTB.DATA.TOOL.CONFIG: DB.RSTB.GRM BEGIN

  # Default output
  OUTPUT:    RSTB.DATA.TOOL
  RESPONSE:  ERROR

  # Alias for then no data sets
  NULL.ALIAS: BEGIN
     'NA' 'N/A' '*NULL*' '*NONE*'
  END.NULL.ALIAS

  # Database connection
  # Tag      Configuration file               Configuration name
  DB.CONFIG: ${/DOCUMENT.PATH}/database.conf  DB.REMOTE
  # DB.CONFIG: ${/DOCUMENT.PATH}/database.conf  DB.LOCAL

  # Access by system user table
  RSTB.USER:      **USER**
  RSTB.PASSWORD:  **PASSWORD**
  RSTB.PRIVILEGE: 'PROCESS'

  # Table data
  ALIASES: BEGIN
    ALIAS: DATA.TYPE  VERSION-1.0
  END.ALIASES

  #  Reader and Write PLAIN|DEFAULT
  TEXT.READER: DEFAULT
  SQL.WRITER:  DEFAULT

# ==============================================
# System Access get user identifier by name
# ==============================================
  DB.QUERY: SYSTEM.UID.BY.NAME BEGIN
    SELECT SYSTEM.UID(':{NAME}');
  END.SYSTEM.UID.BY.NAME

  # Set the importing USER ID and store it in the dictionary
  DB.QUERY: USER BEGIN
     SELECT SYSTEM.UID('${//RSTB.USER}') AS REF;
  END.USER

# ==============================================
# Project related queries
# ==============================================

  # Resolve the project reference by name
  DB.QUERY: LOAD.PROJECT.BY.NAME BEGIN
     SELECT * AS REF
     FROM  BASE.PROJECTS
     WHERE PRJ_NAME = ':{NAME}';
  END.LOAD.PROJECT.BY.NAME

  # Resolve the project reference by ident
  DB.QUERY: LOAD.PROJECT.BY.IDENT BEGIN
     SELECT * AS REF
     FROM  BASE.PROJECTS
     WHERE PRJ_IDENT = ':{IDENT}';
  END.LOAD.PROJECT.BY.IDENT

  # Resolve the method reference by name
  DB.QUERY: LOAD.METHOD.BY.NAME BEGIN
     SELECT * AS REF
     FROM  BASE.METHODS
     WHERE MTH_NAME = ':{NAME}';
  END.LOAD.METHOD.BY.NAME

  # Resolve the method reference by ident
  DB.QUERY: LOAD.METHOD.BY.IDENT BEGIN
     SELECT * AS REF
     FROM  BASE.METHODS
     WHERE MTH_IDENT = ':{IDENT}';
  END.LOAD.METHOD.BY.IDENT

  # Resolve the project phase reference name
  DB.QUERY: LOAD.PHASE.BY.NAME BEGIN
     SELECT * FROM  BASE.PHASES
     WHERE PJP_NAME = ':{NAME}';
  END.LOAD.PHASE.BY.NAME

  # Resolve the project phase reference ident
  DB.QUERY: LOAD.PHASE.BY.IDENT BEGIN
     SELECT * FROM  BASE.PHASES
     WHERE PJP_IDENT = ':{IDENT}';
  END.LOAD.PHASE.BY.IDENT

  # Get the project phase
  DB.QUERY: LOAD.PHASES.OVERVIEW BEGIN
    SELECT pjp_ident AS ID,    pjp_name    AS NAME,
           pjp_begin AS START, pjp_end     AS END,
           pjp_epsg  AS EPSG,  pjp_smp_gsd AS GSD
    FROM   base.phases
    WHERE  pjp_NAME like ':{FILTER}' AND PJP_IDENT <> 0
    ORDER  BY pjp_name
  END.LOAD.PHASES.OVERVIEW

  # ================================================
  # Technical data
  # ================================================
  # Camera related
  # ------------------------------------------------

  # Get Current Camera
  DB.QUERY: LOAD.CAMERA.CYCLE BEGIN
    SELECT cam_ident, cam_name, cam_serno, cam_cycle
    FROM   base.cameras
    WHERE  cam_serno = ':{CAMERA_SERIAL}' AND
           cam_cyle  = ':{CAMERA_CYCLE}'
    ORDER  BY cam_cycle DESC
  END.LOAD.CAMERA.CYCLE

  # Get Camera data
  DB.QUERY: LOAD.CAMERAS BEGIN
    SELECT *
    FROM   base.cameras
    ORDER  BY cam_cycle, cam_name
  END.LOAD.CAMERAS

  # Get Cameras filtered by names
  DB.QUERY: LOAD.CAMERAS.OVERVIEW BEGIN
    SELECT CAM_IDENT AS IDENT, CAM_NAME AS NAME, CAM_CYCLE AS CYCLE,
           CAM_POS AS POS, CAM_COUNT AS COUNT, CAM_TYPE AS TYPE
    FROM   base.cameras
    WHERE  CAM_NAME like ':{FILTER}' AND CAM_IDENT <> 0
    ORDER  BY cam_cycle, cam_name
  END.LOAD.CAMERAS.OVERVIEW

  # Get Cameras filtered by idents
  DB.QUERY: LOAD.CAMERAS.BY.IDENTS BEGIN
    SELECT *
    FROM   base.cameras
    WHERE  cam_ident in ( :{IDENTS} )
    ORDER  BY cam_cycle, cam_name
  END.LOAD.CAMERAS.BY.IDENTS

  # Get Cameras filtered by idents
  DB.QUERY: LOAD.CAMERA.BY.IDENT BEGIN
    SELECT *
    FROM   base.cameras
    WHERE  cam_ident = :{IDENT}
  END.LOAD.CAMERA.BY.IDENT

  # ------------------------------------------------
  # TEC & CONFIG GROUP RELATED
  # ------------------------------------------------

  # Get Load Tec Config by Date
  DB.QUERY: LOAD.TCF.BY.DATE BEGIN
    SELECT *
    FROM   base.tec_configs
    WHERE  tcf_cycle < ':{DATE}'::DATE
    ORDER  BY tcf_cycle DESC LIMIT 1
  END.LOAD.TCF.BY.DATE

  # Get Load Tec Config by ident
  DB.QUERY: LOAD.TGP.BY.REF BEGIN
    SELECT *
    FROM   base.tec_groups
    WHERE  tcf_ref = :{IDENT}
  END.LOAD.TGP.BY.REF

  # Get Tec Overview filtered
  DB.QUERY: LOAD.TCF.OVERVIEW BEGIN
    SELECT TCF_IDENT AS IDENT, TCF_NAME AS NAME, TCF_CYCLE AS CYCLE
    FROM   base.tec_configs
    WHERE  TCF_NAME like ':{FILTER}' AND TCF_IDENT <> 0
    ORDER  BY tcf_cycle, tcf_name
  END.LOAD.TCF.OVERVIEW

  # Get Load Tec Config by Date
  DB.QUERY: LOAD.TGP.DEV.BY.REF BEGIN
    SELECT *
    FROM   base.tec_groups
    WHERE  tcf_ref = :{IDENT} AND
           tgp_part_type = ':{DEVICE}'
  END.LOAD.TGP.DEV.BY.REF

  # ==========================================
  # SURVEY
  # ==========================================
    # Get Tec Overview filtered
  DB.QUERY: LOAD.MISSION.OVERVIEW BEGIN
    SELECT srv_ref AS IDENT, srv_name AS NAME
    FROM   census.missions
    WHERE  SRV_NAME like ':{FILTER}' AND srv_ref <> 0
    ORDER  BY srv_name
  END.LOAD.MISSION.OVERVIEW

  # Resolve the project phase reference name
  DB.QUERY: LOAD.MISSION.BY.NAME BEGIN
     SELECT * FROM  SURVEY.MISSIONS
     WHERE SRV_NAME = ':{NAME}';
  END.LOAD.MISSION.BY.NAME

  # Resolve the project phase reference ident
  DB.QUERY: LOAD.MISSION.BY.IDENT BEGIN
     SELECT * FROM SURVEY.MISSIONS
     WHERE SRV_IDENT = ':{IDENT}';
  END.LOAD.MISSION.BY.IDENT

  # -----------------------------------------
  # Flight plans
  # -----------------------------------------

  # Resolve the project phase reference name
  DB.QUERY: LOAD.FP.PLAN.BY.NAME BEGIN
     SELECT * FROM PLAN.FLIGHTS
     WHERE FP_NAME = ':{NAME}';
  END.LOAD.FP.PLAN.BY.NAME

  # Resolve the project phase reference ident
  DB.QUERY: LOAD.FP.PLAN.BY.IDENT BEGIN
     SELECT * FROM PLAN.FLIGHTS
     WHERE FP_IDENT = ':{IDENT}';
  END.LOAD.FP.PLAN.BY.IDENT

  # Get flight transects for a plan
  DB.QUERY: LOAD.FP.LINES.BY.PLAN BEGIN
     SELECT * FROM PLAN.LINES
     WHERE FP_REF IN (SELECT FP_IDENT
                      FROM PLAN.FLIGHTS
                      WHERE FP_NAME = ':{NAME}');
  END.LOAD.FP.LINES.BY.PLAN

  # Get trigger points for a identified flight plan
  DB.QUERY: LOAD.FP.POINTS.BY.FP.IDENT BEGIN
     SELECT FP_IDENT, LIN_IDENT, LIN_NAME, P.*
      FROM PLAN.POINTS AS P
      LEFT JOIN PLAN.FLIGHTS AS F
             ON ( P.FP_REF = F.FP_IDENT AND
                  FP_IDENT = :{IDENT} )
      LEFT JOIN PLAN.LINES AS L
             ON ( L.FP_REF = :{IDENT} AND
                  P.FP_REF = L.FP_REF AND
                  P.FP_LIN_REF = L.LIN_IDENT )
      WHERE P.FP_REF = :{IDENT}
      ORDER BY FP_IDENT, LIN_IDENT, PTS_IDENT
  END.LOAD.FP.POINTS.BY.FP.IDENT

  # Resolve trigger points for a flight plan
  DB.QUERY: LOAD.FP.POINT.BY.REFS BEGIN
     SELECT *,
            ST_X(PTS_GEOM) AS PTS_LON,
            ST_Y(PTS_GEOM) AS PTS_LAT,
            ST_X(ST_TRANSFORM(PTS_GEOM, PTS_EPSG)) AS PTS_UTMX,
            ST_Y(ST_TRANSFORM(PTS_GEOM, PTS_EPSG)) AS PTS_UTMY
      FROM PLAN.POINTS
      WHERE FP_REF      = :{FP.REF}  AND
            FP_LIN_REF  = :{LIN.REF} AND
            PTS_IDENT   = :{PTS.REF}
  END.LOAD.FP.POINT.BY.REFS

  # ====================================================
  # Import related queries
  # ====================================================

  # Resolve the cameras used in a campaign
  DB.QUERY: LOAD.EXIF.BY.CAMPAIGN.CAMERA BEGIN
     SELECT * FROM SURVEY.EXIF
     WHERE SRV_REF IN (SELECT SRV_IDENT
                       FROM  SURVEY.MISSIONS
                       WHERE SRV_NAME = ':{CAMPAIGN}')
           AND CAM_NAME = ':{CAMERA}'
  END.LOAD.EXIF.BY.CAMPAIGN.CAMERA

  # Load quicklook data for a referenced campaign camera
  DB.QUERY: LOAD.QLOOKS.BY.CAMPAIGN.CAM.REF BEGIN
     SELECT * FROM SURVEY.IMG_DEVEL
     WHERE SRV_REF IN (SELECT SRV_IDENT
                       FROM  SURVEY.MISSIONS
                       WHERE SRV_NAME = ':{CAMPAIGN}')
           AND CAM_REF = ':{CAM.REF}'
  END.LOAD.QLOOKS.BY.CAMPAIGN.CAM.REF

  # Load trigger data for a referenced campaign
  DB.QUERY: LOAD.EVENTS.BY.CAMPAIGN BEGIN
     SELECT * FROM SURVEY.TRG_EVENTS
     WHERE SRV_REF IN (SELECT SRV_IDENT
                       FROM  SURVEY.MISSIONS
                       WHERE SRV_NAME = ':{CAMPAIGN}')
  END.LOAD.EVENTS.BY.CAMPAIGN

  # Load synchronisation data for a referenced campaign
  DB.QUERY: LOAD.SYN.EO.BY.SRV.REF BEGIN
      SELECT DISTINCT TEV_GROUP
        FROM survey.sync AS SYN
       WHERE SYN.srv_ref = :{SRV.REF}
  END.LOAD.SYN.EO.BY.SRV.REF

  # Filter out image metadata from a synchonisation list
  DB.QUERY: LOAD.SYN.SXF.BY.SRV.REF BEGIN
     SELECT  tev_group, syn_ident, sxf_ident, sxf.cam_name
     FROM survey.sync AS SYN
     LEFT JOIN survey.exif AS SXF
       ON ( SYN.srv_ref = :{SRV.REF} AND
            SXF.srv_ref = :{SRV.REF} AND
            syn_src = 'SXF' AND
            sxf_ident = syn_ref)
      WHERE syn_src = 'SXF';
  END.LOAD.SYN.SXF.BY.SRV.REF

  # Filter out image 'development' data from a synchonisation list
  DB.QUERY: LOAD.SYN.IDV.BY.SRV.REF BEGIN
     SELECT  tev_group, syn_ident, idv_ident, cam.cam_serno
     FROM survey.sync AS SYN
     LEFT JOIN survey.img_devel AS IDV
            ON ( SYN.srv_ref = :{SRV.REF} AND
                 IDV.srv_ref = :{SRV.REF} AND
                 syn_src = 'IDV' AND
                 idv_ident = syn_ref)
     LEFT JOIN base.cameras AS CAM
            ON (cam_ident = cam_ref)
     WHERE syn_src = 'IDV';
  END.LOAD.SYN.IDV.BY.SRV.REF

  # Get a complete identified trigger event record
  DB.QUERY: LOAD.TEV.BY.IDENT BEGIN
      SELECT *
        FROM SURVEY.TRG_EVENTS
       WHERE TEV_IDENT = :{IDENT}
  END.LOAD.TEV.BY.IDENT

  # Get a complete identified exif metadata record
  DB.QUERY: LOAD.SXF.BY.IDENT BEGIN
      SELECT *
        FROM SURVEY.EXIF
       WHERE SXF_IDENT = :{IDENT}
  END.LOAD.SXF.BY.IDENT

  # Get a complete identified image develoment data record
  DB.QUERY: LOAD.IDV.BY.IDENT BEGIN
      SELECT *
        FROM SURVEY.IMG_DEVEL
       WHERE IDV_IDENT = :{IDENT}
  END.LOAD.IDV.BY.IDENT

  # Function to call the sun angles
  DB.QUERY: CALC.SUN.ANGLES BEGIN
      SELECT * FROM
         plr_sun_pos(':{DATE}',':{TIME}', :{LON}, :{LAT})
  END.CALC.SUN.ANGLES

  # Flight plan position
  DB.QUERY: CALC.TRG.FP.POS BEGIN
      SELECT
        :{TEV.UTM.GEOM} AS TEV_UTM_GEOM,
        :{TEV.GEO.GEOM} AS TEV_GEO_GEOM,
        :{TEV.LON}      AS TEV_LON,
        :{TEV.LAT}      AS TEV_LAT,
        :{TEV.UTMX}     AS TEV_UTMX,
        :{TEV.UTMY}     AS TEV_UTMY,
        :{TEV.UTMZ}     AS TEV_UTMZ,
        :{FP.UTM.GEOM}  AS FP_UTM_GEOM,
        :{FP.GEO.GEOM}  AS FP_GEO_GEOM,
        :{FP.LON}       AS FP_LON,
        :{FP.LAT}       AS FP_LAT,
        :{FP.UTMX}      AS FP_UTMX,
        :{FP.UTMY}      AS FP_UTMY,
        :{FP.UTMZ}      AS FP_UTMZ,
        :{IMG.ENV}      AS IMG_ENV
  END.CALC.TRG.FP.POS

# Load the image list with the time stamps for a
# campaign
DB.QUERY: LOAD.IMAGE.STAPMS.BY.SRV.REF BEGIN
    SELECT
       IMG_CAM, IMG_IDENT, IMG_NUM, IMG_TRC,
       GPS_WEEK, GPS_WSEC, S.UTMX, S.UTMY, S.OTHZ
      FROM survey.images AS S
      LEFT JOIN survey.trg_events AS T
        ON ( T.srv_ref = :{SRV.REF} AND
             T.srv_ref = S.srv_ref  AND
             tev_ref = tev_ident )
     WHERE  S.srv_ref = :{SRV.REF}
     ORDER
        BY img_cam, gps_week, gps_wsec
END.LOAD.IMAGE.STAPMS.BY.SRV.REF

# Load the image list with the time stamps for a
# campaign
DB.QUERY: LOAD.IMAGE.CUT.RENV.BY.SRV.REF BEGIN
    SELECT
       IMG_IDENT, IMG_NAME, IMG_CAM,
       ST_ASEWKT(IMG_RENV) AS IMG_RENV,
       ST_ASEWKT(IMG_HEAD_EDGE) AS IMG_HEAD_EDGE,
       ST_ASEWKT(IMG_REAR_EDGE) AS IMG_REAR_EDGE
      FROM SURVEY.IMAGES
     WHERE SRV_REF = :{SRV.REF}
     ORDER
        BY IMG_CAM, IMG_NAME
END.LOAD.IMAGE.CUT.RENV.BY.SRV.REF

# Calculate the cut envelope by a given image ID
# With:
# (a) 5° tolreance to determin a a course for the
# prevoius / next image position way or towards/away
# the sun.
# (b) 1.5 m Buffer radius to prevent the production
# of hanging nodes during the geometry operations.
# (c) 1 means, we want to get the 1st POLYGON
# no eventually emerging MULTIPOLYGONS produced
# by artifacts.
DB.QUERY: SET.CUT.ENVELOPE.BY.SRV.REF BEGIN
   UPDATE SURVEY.IMAGES
     SET img_cut = SURVEY.CUT_ENVELOPE_EDGE(img_ident, 'E', 'LL', 5, 0.25)
   WHERE SRV_REF = :{SRV.REF}
END.SET.CUT.ENVELOPE.BY.SRV.REF

# Calculate the reduced cut envelope by a given image ID
# With:
# (a) 5° tolreance to determin a a course for the
# prevoius / next image position way or towards/away
# the sun.
# (b) 1.5 m Buffer radius to prevent the production
# of hanging nodes during the geometry operations.
# (c) 1 means, we want to get the 1st POLYGON
# no eventually emerging MULTIPOLYGONS produced
# by artifacts.
DB.QUERY: SET.RCUT.ENVELOPE.BY.SRV.REF BEGIN
   UPDATE SURVEY.IMAGES
      SET img_rcut = SURVEY.CUT_ENVELOPE_EDGE(img_ident, 'R', 'LL', 5, 0.25)
    WHERE SRV_REF = :{SRV.REF}
END.SET.RCUT.ENVELOPE.BY.SRV.REF

# Load all images of an active survey
DB.QUERY: LOAD.IMAGES.BY.SRV.REF BEGIN
  SELECT
   img_ident,
   img_name,
   img_cam,
   img_mount,
   img_num,
   img_trc,
   srv_ref,
   cam_ref
  FROM SURVEY.IMAGES
  WHERE    srv_ref = :{SRV.REF} AND img_active
  ORDER BY img_cam, img_trc, img_num
END.LOAD.IMAGES.BY.SRV.REF

# Get the census ident by a given name and survey
DB.QUERY: CENSUS.IMAGE.IDS.BY.NAME.CAM.SRV.REF BEGIN
  SELECT img_ident, csi_ident
  FROM SURVEY.IMAGES AS IMG
  LEFT JOIN CENSUS.IMAGES ON (img_ident = img_ref)
  WHERE
     img_name = ':{NAME}' AND
     img_cam  = ':{CAM}' AND
     IMG.srv_ref  = :{SRV.REF};
END.CENSUS.IMAGE.IDS.BY.NAME.CAM.SRV.REF

# Convert a identified image pixel pos to world coordinates
# screen related
DB.QUERY: SURVEY.SCREEN.IMAGE.WORLD.XY BEGIN
    SELECT WX, WY, GLL
    FROM SURVEY.SCREEN_IMAGE_TO_WORLD(:{COL}, :{ROW}, :{IMG.REF});
END.SURVEY.SCREEN.IMAGE.WORLD.XY

# Convert a identified image pixel pos to world coordinates
# ortho-rectification an georeferencing related
DB.QUERY: SURVEY.ORIGINAL.IMAGE.WORLD.XY BEGIN
    SELECT WX, WY, GLL
    FROM SURVEY.ORIGINAL_IMAGE_TO_WORLD(:{COL}, :{ROW}, :{IMG.REF});
END.SURVEY.ORIGINAL.IMAGE.WORLD.XY

# Get the screening class by a given key
DB.QUERY: SCREEN.CLASS.ID.BY.KEY.VERSION BEGIN
   SELECT sccl_ident FROM BASE.SCREEN_CLASS
   WHERE sccl_key = :{SCCL.KEY} AND
         sccl_version = ':{SCCL.VERSION}';
END.SCREEN.CLASS.ID.BY.KEY.VERSION

DB.QUERY: SCREENING.SAMPLES.BY.CAMPAIGN BEGIN
  SELECT
     cs_ident,
     cs_gx,
     cs_gy,

     C.utmx as cur_utmx,
     C.utmy as cur_utmy,
     C.othz as cur_othz,
     C.gndz as cur_gndz,
     C.smp_gsd as cur_smp_gsd,
     
     C.img_ident  AS cur_img_ref,
     C.img_cam    AS cur_img_cam,
     C.img_name   AS cur_img_name,
     C.saff_m11   AS cur_saff_m11,
     C.saff_m12   AS cur_saff_m12,
     C.saff_m13   AS cur_saff_m13,
     C.saff_m21   AS cur_saff_m21,
     C.saff_m22   AS cur_saff_m22,
     C.saff_m23   AS cur_saff_m23,
     C.saff_im11  AS cur_saff_im11,
     C.saff_im12  AS cur_saff_im12,
     C.saff_im13  AS cur_saff_im13,
     C.saff_im21  AS cur_saff_im21,
     C.saff_im22  AS cur_saff_im22,
     C.saff_im23  AS cur_saff_im23,

     P.utmx as prev_utmx,
     P.utmy as prev_utmy,
     P.othz as prev_othz,
     P.gndz as prev_gndz,
     P.smp_gsd as prev_smp_gsd,

     P.img_ident  AS prev_img_ref,
     P.img_cam    AS prev_img_cam,
     P.img_name   AS prev_img_name,
     P.saff_m11   AS prev_saff_m11,
     P.saff_m12   AS prev_saff_m12,
     P.saff_m13   AS prev_saff_m13,
     P.saff_m21   AS prev_saff_m21,
     P.saff_m22   AS prev_saff_m22,
     P.saff_m23   AS prev_saff_m23,
     P.saff_im11  AS prev_saff_im11,
     P.saff_im12  AS prev_saff_im12,
     P.saff_im13  AS prev_saff_im13,
     P.saff_im21  AS prev_saff_im21,
     P.saff_im22  AS prev_saff_im22,
     P.saff_im23  AS prev_saff_im23,

     N.utmx as next_utmx,
     N.utmy as next_utmy,
     N.othz as next_othz,
     N.gndz as next_gndz,
     N.smp_gsd as next_smp_gsd,

     N.img_ident  AS next_img_ref,
     N.img_cam    AS next_img_cam,
     N.img_name   AS next_img_name,
     N.saff_m11   AS next_saff_m11,
     N.saff_m12   AS next_saff_m12,
     N.saff_m13   AS next_saff_m13,
     N.saff_m21   AS next_saff_m21,
     N.saff_m22   AS next_saff_m22,
     N.saff_m23   AS next_saff_m23,
     N.saff_im11  AS next_saff_im11,
     N.saff_im12  AS next_saff_im12,
     N.saff_im13  AS next_saff_im13,
     N.saff_im21  AS next_saff_im21,
     N.saff_im22  AS next_saff_im22,
     N.saff_im23  AS next_saff_im23,

  FROM CENSUS.SCREENING AS S
  LEFT JOIN SURCEY.IMAGES AS C ON (C.img_ident = S.img_ref)
  LEFT JOIN SURVEY.IMAGES AS P ON (C.img_rear1 = P.img_ident)  
  LEFT JOIN SURVEY.IMAGES AS N ON (C.img_head1 = N.img_ident)  
  WHERE srv_name = ':{CAMPAIGN}'
  LIMIT 10;
END.SCREENING.SAMPLES.BY.CAMPAIGN

# =======================================================
# Final ID
# =======================================================
# Get the identified species of a certain ID level
# FLAG(s) are I - Initial ID, S - Secondary ID, O - QA ID
DB.QUERY: SPECIES.FOUND.QA BEGIN
   SELECT cs_ref, cid_ref, tx_ref, tx_ccf_ref
   FROM   CENSUS.SPECIES_FOUND
   WHERE  srv_ref = :{CAMPAIGN} AND
          cid_is_flag = ':{FLAG}' AND :{FILTER}
END.SPECIES.FOUND.QA

DB.QUERY: SPECIES.IN.QA BEGIN
   SELECT cid_ident, cs_ref, cid_qa_state, cid_active, cid_delete
   FROM   CENSUS.IDENTS
   WHERE  srv_ref = :{CAMPAIGN} AND
          cid_qa_state = ':{FLAG}' AND :{FILTER}
END.SPECIES.IN.QA

DB.QUERY: LOAD.SPECIES.BY.IDENT.COPY BEGIN
 SELECT
   cid_icol,  cid_irow, cid_gx, cid_gy, 
   cid_rem,   cid_dir,  cid_len, cid_span, 
   ccf_len_ref, cid_alt, ccf_alt_ref, prj_ref, 
   pjp_ref, srv_ref, img_ref, csi_ref, cst_ref, 
   cs_ref, sccl_ref, cfl_ref, tx_ref, ccf_tx_ref, 
   cac_ref, cgd_ref, cbg_ref, cbv_ref, cag_ref, cas_ref, 
   ca_ref, cbp_ref, cid_ccr_ref
 FROM CENSUS.IDENTS
 WHERE cid_ident = :{IDENT};
END.LOAD.SPECIES.BY.IDENT.COPY

DB.QUERY: LOAD.SPECIES.BY.IDENT BEGIN
 SELECT *
 FROM CENSUS.IDENTS
 WHERE cid_ident = :{IDENT};
END.LOAD.SPECIES.BY.IDENT

DB.QUERY: LOAD.SAMPLE.BY.IDENT BEGIN
 SELECT
   *
 FROM CENSUS.SAMPLES
 WHERE cs_ident = :{IDENT};
END.LOAD.SAMPLE.BY.IDENT

DB.QUERY: DB.QUERY BEGIN
-- DUMMY
END.DB.QUERY

END.DB.RSTB.GRM
END.RSTB.DATA.TOOL.V01


